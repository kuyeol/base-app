				Microservice Implementation
.....................................................................................
Microservices just archtecture, we can implement any language,any framework.

Java implementation:
1.Spring cloud
2.Quarkus
3.Vertx
etc....
.....................................................................................
			Quarkus as Microservice implmentation
.....................................................................................
Quarkus is framework which implements the most of the microservice design patterns
via Ecplise Microprofile specification.

Micro Profile specification is  extension of "Microservice" design patterns.


Domain Modeling
................
ProductCatelog Management
Inventory Management
OrderManagement
DeliveryManagement

Application Architecture

ProductCataglog
  ->Service

What is service?

  Service is mini application.
  Service is sub domain in application 
  For eg in Ecommerce domain "ProductCatglog" ,"Cusotmer Management","Order Management"

How to implement service?

  Service can be implemented as a java maven project...
  Service has apis

API: Application programming interface..
 Which exposes biz logic 
 Returns data , recevies data

Service API Design:

1.local api
  apis are exposed within objects, called by other objects
2.remote api
  apis are exposed within objects, called by other objects/programs via networks

Remote apis: (RPI)

1.webservices
   soap api /rest api/graphql api
2.RPC
   TCP api
   Grpc apis
3.MOM -Event Driven Microservices
  Using kafka,Rabbitmq.
..................................................................................
			RestFull WebService Implementation
..................................................................................
         	  Microservice-HTTP Based Microservice
  	  RESTFull Web Service using JAX-RS  Spec (Jakarta RESTful Web Services)
		      using RESTEasy Framework
.....................................................................................

Jakarta RESTful Web Services is spec of JEE , implementation is RestEasy Framework..

In Quarkus RestEasy has been modified for building non blocking apps


 			  QuarkusApp
			      |
	             Quarkus RestEasy Module
			      |
		         RestEasy Framwork
			     |
		   Jarkarta RestFull WebService

RESTEasy:

  RESTEasy is a JBoss / Red Hat project that provides various frameworks to help you build RESTful Web Services and RESTful Java applications. It is an implementation of the Jakarta RESTful Web Services, an Eclipse Foundation specification that provides a Java API for RESTful Web Services over the HTTP protocol.

Moreover, RESTEasy also implements the MicroProfile REST Client specification API

Quarkus team uses RESTEasy framework for building MicroService's REST API Design.

Traditional RESTEasy apps are deployed on "Jboss,Apach Tomcat" like web containers.
.....................................................................................
			  Types of RESTFull Web services 

1.Reactive web service - Highly Recommended
2.Non Reactive web service - Not recommended


By default,Rest apis are blocking, meaning that which is not handled by event loop thread.

How to create rest api?

Note:
 Rest api we write based ON " jakarta RestFull WebServices" specification,Using Rest Easy Framwork.
https://jakarta.ee/specifications/restful-ws/

Step 1:
create quarkus app rest-app

Project Dependency:
   <dependency>
           <groupId>io.quarkus</groupId>
           <artifactId>quarkus-rest</artifactId>
   </dependency>

Step 2:
 Run quarkus app
 >quarkus dev

.....................................................................................
			  REST API Core concepts
.....................................................................................

Resources:
   Domain Model which expose api which are accessed by clients using urls 

CustomerResource,ProductResource,PaymentResource etc....

RESTEasy is annotation driven based on jakarta spec:


package org.acme;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;

@Path("/hello")
public class GreetingResource {

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return "Hello from Quarkus REST";
    }
}

Common Annoations
 Core Package
jakarata.ws.rs


@Path - to map url
@GET -  http get
@POST - http post
@PUT -  http put
@DELETE - http delete.
.....................................................................................
			CURD  Operations
.....................................................................................

GET
POST
DELETE
PUT

package com.ibm.rest.api;

import jakarta.ws.rs.*;

@Path("customers")
public class CustomerResource {

    //api
    @GET
    public String findAll() {
        return "findAll";
    }

    @POST
    public String save() {
        return "save";
    }

    @PUT
    public String update() {
        return "Update";
    }

    @DELETE
    public String remove() {
        return "Remove";
    }
}

Testing:
 Use any tool to test apis like postman
GET    /customers
POST   /customers
PUT    /customers
DELETE /customers

.....................................................................................				 Nested URL

Eg

GET /products/reviews
GET /customers/comments

package com.ibm.rest.api;

import jakarta.ws.rs.*;

@Path("customers")
public class CustomerResource {

    @GET
    @Path("comments")
    public String findComments(){
        return  "Customer Comments";
   }

}

 GET /customers/comments
...................................................................................
....................................................................................
		 How to Pass data to REST API - Input Parameter
....................................................................................
Data can be passed to the End Point.

1.Through url - path parameter,query parameter,matrix parameter
                Matrix parameters are similar to query param, passing more than one 		parameter

2.Through payload
    Sending data part of the http body..

Path Parameter:
...............

GET /customers/1
GET /customers/2
GET /customers/3


package com.ibm.rest.api.parameters.path;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;

@Path("books")
public class BookResource {

    @GET
    @Path("{Id}")
    public String findById(@PathParam("Id") Long id) {
        return "Book By Id " + id;
    }
}

Testing:
GET localhost:8080/books/20

Query Parameters:
  Passing more than one parameter

GET /books/pages?totalPages=34&unit=78

package com.ibm.rest.api.parameters;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.QueryParam;

@Path("books")
public class BookResource {

    @GET
    @Path("{Id}")
    public String findById(@PathParam("Id") Long id) {
        return "Book By Id " + id;
    }

    @Path("pages")
    @GET
    public String getPagesAndUnits(@QueryParam("totalPages") Long pages, @QueryParam("unit") Long unit) {
        return "Total Pages " + pages + " " + " Total Units " + unit;
    }
}
...................................................................................
			 Default Values For Query Parameters
....................................................................................
When we dont pass query parameters, we can initalize the default values.


package com.ibm.rest.api.parameters;

import jakarta.ws.rs.*;

@Path("books")
public class BookResource {

    @GET
    @Path("{Id}")
    public String findById(@PathParam("Id") Long id) {
        return "Book By Id " + id;
    }

    @Path("pages")
    @GET
    public String getPagesAndUnits(@QueryParam("totalPages") @DefaultValue("1") Long pages, @QueryParam("unit") @DefaultValue("0") Long unit) {
        return "Total Pages " + pages + " " + " Total Units " + unit;
    }
}

GET localhost:8080/books/pages

Response:
Total Pages 1  Total Units 0
.....................................................................................
			Matrix Parameters
.....................................................................................

Matrix parameters and query parameters both are same, that means we can pass more number of parameters.

The difference is  only delemiter ";"

package com.ibm.rest.api.parameters;

import jakarta.ws.rs.*;

@Path("books")
public class BookResource {

    @GET
    @Path("{Id}")
    public String findById(@PathParam("Id") Long id) {
        return "Book By Id " + id;
    }

    @Path("pages")
    @GET
    public String getPagesAndUnits(@QueryParam("totalPages") @DefaultValue("1") Long pages, @QueryParam("unit") @DefaultValue("0") Long unit) {
        return "Total Pages " + pages + " " + " Total Units " + unit;
    }

    @GET
    @Path("info")
    public String getBookInfo(@MatrixParam("category") @DefaultValue("science") String category, @MatrixParam("lang") @DefaultValue("english") String lang) {
        return "Category " + category + " " + "Language " + lang;

    }
}

GET books/info;category=story;lang=english

Response:
Category story Language english
.....................................................................................
			How to pass payload(data) to Rest api
....................................................................................

Generally data is submitted to rest api inform of "XML,JSON".


package com.ibm.rest.api.payload.entity;

public class Order {
    private Integer orderId;
    private String orderStatus;
    private Double orderValue;

    public Order() {
    }

    public Order(Integer orderId, String orderStatus, Double orderValue) {
        this.orderId = orderId;
        this.orderStatus = orderStatus;
        this.orderValue = orderValue;
    }

    public Integer getOrderId() {
        return orderId;
    }

    public void setOrderId(Integer orderId) {
        this.orderId = orderId;
    }

    public String getOrderStatus() {
        return orderStatus;
    }

    public void setOrderStatus(String orderStatus) {
        this.orderStatus = orderStatus;
    }

    public Double getOrderValue() {
        return orderValue;
    }

    public void setOrderValue(Double orderValue) {
        this.orderValue = orderValue;
    }

    @Override
    public String toString() {
        return "Order{" +
                "orderId=" + orderId +
                ", orderStatus='" + orderStatus + '\'' +
                ", orderValue=" + orderValue +
                '}';
    }
}


package com.ibm.rest.api.payload;

import com.ibm.rest.api.payload.entity.Order;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;

@Path("orders")
public class OrderResource {

    @POST
    public String save(Order order) {
        System.out.println(order);
        return "Order saved";
    }

}

Testing 
POST localhost:8080/orders

{
    "orderId": 1,
    "orderStauts": "CREATED",
    "orderValue": 1000   
}

The response 

415 Unsupported Media type..

By default Quarkus does not know how to convert JSON into Java Object...This means no json parser..

Solution:
 We need to add json paraser - Jackson Parser

Before adding json parser dependency , we need to discuss one more concept
.....................................................................................					Extensions
....................................................................................
What is extension?

 extension is , project dependency- jar dependency.

By default, you can have extensions, when we create new project.

Think of Quarkus extensions are as your project dependencies.

Extensions configure,boot and integrate a framework or technology into your quarkus application.

They also do all of the heavy lifting of providing the right information to Graalvm For application to compile nativly.

How do you manage extensions?
  Management means - add,removing,list extensions

There are two way to get  extensions?

1.via maven or gradle
2.via cli -quarkus command.

 extension, ext          Configure extensions of an existing project.
    list, ls              List platforms and extensions.
    categories, cat       List extension categories.
    add                   Add extension(s) to this project.
    remove, rm            Remove extension(s) from this project.

syntax:
 quarkus ext ls
 

How to add extension:

quarkus ext add io.quarkus:quarkus-rest-jackson

package com.ibm.rest.api.payload;

import com.ibm.rest.api.payload.entity.Order;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;

@Path("orders")
public class OrderResource {

    @POST
    public String save(Order order) {
        System.out.println(order);
        return "Order saved";
    }

}
Testing 
POST localhost:8080/orders

{
    "orderId": 1,
    "orderStauts": "CREATED",
    "orderValue": 1000   
}

The response would be

200 status, Order saved

.....................................................................................
			      Responses
.....................................................................................

What can be response?

REST API return any one of the following as type

1.String - plain/text
2.Objects/Collections - application/json , application/xml
3.void - No Return type , only Status - No Content
4.Response - Response Object
5.Reactive Type - Uni or Multi - Non Blocking api is enabled...


1.String - plain/text

@Path("/hello")
public class GreetingResource {

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return "Hello from Quarkus REST";
    }
}

1.Return Objects and Collections

 In order to return Object or Collection, we need converter to convert Object/Collection into json.

quarkus ext add io.quarkus:quarkus-rest-jackson


Object :
package com.ibm.rest.response.collections;

import com.ibm.rest.response.enity.Order;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("orders")
public class OrderResource {

    @GET
    public Order getOrder() {
        return new Order(1, "CREATED", 344.44, "This is fruits");
    }
    
}


Collections:
.............
package com.ibm.rest.response.collections;

import com.ibm.rest.response.enity.Order;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;

import java.util.List;

@Path("orders")
public class OrderResource {

    @GET
    public Order getOrder() {
        return new Order(1, "CREATED", 344.44, "This is fruits");
    }

    @GET
    @Path("list")
    public List<Order> getOrders() {
        return List.of(
                new Order(1, "CREATED", 344.44, "This is fruits"),
                new Order(2, "PENDING", 44.00, "This is fruits"),
                new Order(3, "DISPATCHED", 33434.89, "This is fruits")
                );
    }


}
.....................................................................................
			Response Object as Return type
....................................................................................

What is Advantage over Objects when we "Response" Object.

You can send additional information along with response, like custom headers,tokens, some resource information.

Response Object
  Response Object used to send "Payload" along with meta data(http status code, other informations)

HTTP Status Code:
1.informational status  100 to 199- 1X
2.success response -  200 - 299 - 2X
3.Redirects - 300-399 - 3X
4.Client Errors - 400-499 - 4X
5.Server errors - 500 - 599 - 5X

Response Class:
Response is abstract class contains two factory api..

public abstract Object getEntity()
public abstract int getStatus()

Builder class:

public static ResponseBuilder status(int status)
public static ResponseBuilder ok()



package com.ibm.rest.response.enity;

public class Customer {
    private Integer customerId;
    private String customerName;
    private String city;

    public Customer() {
    }

    public Customer(Integer customerId, String customerName, String city) {
        this.customerId = customerId;
        this.customerName = customerName;
        this.city = city;
    }

    @Override
    public String toString() {
        return "Customer{" +
                "customerId=" + customerId +
                ", customerName='" + customerName + '\'' +
                ", city='" + city + '\'' +
                '}';
    }

    public Integer getCustomerId() {
        return customerId;
    }

    public void setCustomerId(Integer customerId) {
        this.customerId = customerId;
    }

    public String getCustomerName() {
        return customerName;
    }

    public void setCustomerName(String customerName) {
        this.customerName = customerName;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }
}


package com.ibm.rest.response.collections;

import com.ibm.rest.response.enity.Customer;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.Response;

import java.util.List;

@Path("customers")
public class CustomerResource {

    @GET
    public Response findAll() {
        List<Customer> customers = List.of(
                new Customer(1, "Subramaian", "Coimbatore"),
                new Customer(2, "Murugan", "Coimbatore"),
                new Customer(3, "Karthik", "Chennai")
        );
        return Response.ok().entity(customers).header("secret", "223klwewerwr").build();
    }
}
..................................................................................					void
...................................................................................

If you want to return only status code , not content- like NoContent

package com.ibm.rest.response.collections;

import com.ibm.rest.response.enity.Customer;
import jakarta.ws.rs.DELETE;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.Response;

import java.util.List;

@Path("customers")
public class CustomerResource {

    @DELETE
    public void delete(){
        System.out.println("Delete");
    }
}
...................................................................................
.....................................................................................	
			 Reactive Response
....................................................................................
As we discussed already, Quarkus supports non blocking io arch.


Quarkus is running on Vertx Engine

Vertx engine uses non blocking infrastrastructure of the operating system.

Vertx Provides threading model which are two types of threads.

1.Non Blocking threads- Event Loop Threads.
2.Blocking threads or Worker Pool threads

Non Blocking threads or Event Loop Threads are used to multiplex the incoming requests.
Vertx Engine provides per cpu core two threads, if i have 12 core, then i would have 24 threads to handle incoming requests.

Worker pool threads are used to handle "Request Per  Thread model" - One request and one thread.

           "By default all Rest api runs on "Worker Pool thread"."

Testing Thread:

package com.ibm.rest.response.threads;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("workerThread")
public class WorkerThreadResource {

    @GET
    public String runOnWorker() {
        String threadName = Thread.currentThread().getName();
        //on which thread this method is running
        return threadName;
    }

}

Testing:
http://localhost:8080/workerThread

Output:
executor-thread-1

Here exector-thread-1 is "Blocking thread" meaning that our code is running request per thread model. 



....................................................................................
     How to run the request handling using Event loop thread(nonBlocking thread)
...................................................................................

if your endpoint method needs to accomplish an async or reactive task before being able to answer to the client, you can declare your method to return "Uni/Multi",
in which case current http request to be turned as non blocking handled by "event loop thread", the current method will not return result immediately rather which suspends current http thread.


package com.ibm.rest.response.threads;

import io.smallrye.mutiny.Uni;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("nonblockingThread")
public class NonBlockingThreadResource {

    @GET
    public Uni<String> getName() {
        System.out.println(Thread.currentThread().getName());
        return Uni.createFrom().item("Subramnaian");
    }
}

Testing:
http://localhost:8080/nonblockingThread
Response:
vert.x-eventloop-thread-0
...................................................................................
....................................................................................
		  How to return List or Object via Mutiny
...................................................................................

package com.ibm.rest.response.reactive;

import com.ibm.rest.response.enity.Customer;
import io.smallrye.mutiny.Uni;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

import java.util.List;

@Path("reactive")
public class ReactiveResource {

    @GET
    public Uni<List<Customer>> getCustomers() {
        List<Customer> customers = List.of(
                new Customer(1, "Subramaian", "Coimbatore"),
                new Customer(2, "Murugan", "Coimbatore"),
                new Customer(3, "Karthik", "Chennai")
        );
        return Uni.createFrom().item(customers);
    }
}
....................................................................................
		Response Object with Reactive type
...................................................................................
package com.ibm.rest.response.reactive;

import com.ibm.rest.response.enity.Customer;
import io.smallrye.mutiny.Uni;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.Response;

import java.util.List;

@Path("reactive")
public class ReactiveResource {

    @GET
    @Path("response")
    public Uni<Response> getCustomerResponse() {
        List<Customer> customers = List.of(
                new Customer(1, "Subramaian", "Coimbatore"),
                new Customer(2, "Murugan", "Coimbatore"),
                new Customer(3, "Karthik", "Chennai")
        );
        return Uni.createFrom()
                .item(customers)
                .onItem()
                .transform(customers1 -> Response.ok(customers1).header("message", "customers"))
                .onItem()
                .transform(Response.ResponseBuilder::build);
    }

}
..................................................................................
			Streaming-Multi Response
..................................................................................

Sending sequence of values over period of time - Streaming.

How to stream values?
 Using multi Type.


package com.ibm.rest.response.streaming;

import io.smallrye.mutiny.Multi;
import io.smallrye.mutiny.Uni;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;

import java.time.Duration;
import java.util.List;
import java.util.Random;

@Path("stream")
public class StreamingResource {

    @GET
    @Produces(MediaType.SERVER_SENT_EVENTS)
    public Multi<Long> stream() {
        return Multi.createFrom().ticks().every(Duration.ofSeconds(1));
    }

    @GET
    @Produces(MediaType.SERVER_SENT_EVENTS)
    @Path("list")
    public Multi<Integer> list() {
        System.out.println(Thread.currentThread().getName());
        //return Multi.createFrom().iterable(List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));
        Random random = new Random();
        return Multi.createFrom().iterable(List.of(1,2,3,4,5,6,7,8))
                .onItem().call(i -> {
                    Duration delay = Duration.ofMillis(10000);
                    return Uni.createFrom().nullItem().onItem().delayIt().by(delay);
                });
    }
}
.....................................................................................
			Blocking and Non Blocking Threading Models

Quarkus(Vertx) provides two types of threads

1.Event loop thread
   Thread which is used to build non blocking apps
   Vertx(Quarkus) provides limited no threads to handle large concurrency
   Quarkus enables event loop thread is activated to handle incoming request by 
   Mutiny type called "Uni or Multi"

2.Worker loop thread
    It is Request Per thread model threads, when ever new request comes, quarkus allocats new a spearate thread for that request , that thread cant be reused by other request.

.
.................................................................................
		The Golden Rule - Don’t Block the Event Loop thread
.................................................................................

Caution:
  You should not write any code  which blocks event loop thread.

if you block event loop thread, vertx engine throws warning and error(Thread Blocked Exception).

if the code is executed by "Event loop thread", inside that code we should not write any code which blocks that thread....

What are the code which blocks event loop thread.

1.Thread.sleep()
2.Waiting on a lock
3.Waiting on a mutex or monitor (e.g. synchronized section)
4.Doing a long lived database operation and waiting for a result
5.Doing a complex calculation that takes some significant time.
6.Spinning in a loop


I am going to simulate using Thread.sleep how to block event loop thread, then what will happen if you block.


Steps:
1.quarkus create app threading-app


package com.ibm.rest.api.threading;

import io.smallrye.mutiny.Uni;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("blocking")
public class BlockingEventLoopThread {


    @GET
    public Uni<String> blockMe() throws InterruptedException {
        System.out.println(Thread.currentThread().getName());
        //Thread.sleep(1000);
        Thread.sleep(5000);
        return Uni.createFrom().item("Hello");
    }
}

Testing:
http://localhost:8080/blocking

After increasing time we got exception

2024-03-14 15:30:51,826 WARN  [io.ver.cor.imp.BlockedThreadChecker] (vertx-blocked-thread-checker) Thread Thread[vert.x-eventloop-thread-1,5,main] has been blocked for 2572 ms, time limit is 2000 ms: io.vertx.core.VertxException: Thread blocked.


Here we can that got exception, the reason because the thread has been blocked for  more time.

Generally event loop thread can be blocked only for 2000ms which is default time out 

beyond that if try to block, Vertx will throw Exception, called "Thread Blocked"
Exception.

.....................................................................................

What if i want to write blocking operations inside the nonblocking code which returns Reactive?

    @GET
    public Uni<String> blockMe() throws InterruptedException {
        System.out.println(Thread.currentThread().getName());
          //external api call which also may block this event loop thread.
         Thread.sleep(5000)
        return Uni.createFrom().item("Hello");
    }

Solution:
 There is annotation called @Blocking

    @GET
    @Blocking
    public Uni<String> blockMe() throws InterruptedException {
        System.out.println(Thread.currentThread().getName());
        //Thread.sleep(1000);
        Thread.sleep(5000);
        return Uni.createFrom().item("Hello");
    }

 Even though you return Reactive type, now this code will run in worker pool thread only.
....................................................................................
What if i want to run my code in delayed manner in async way in non blocking thread
i cant use Thread.sleep

>Thread.sleep => which is blocking scheduler
>onItem.delayIt() =>  Which is reactive scheduler

package com.ibm.rest.api.threading;

import io.smallrye.common.annotation.Blocking;
import io.smallrye.mutiny.Uni;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.Response;

import java.time.Duration;

@Path("blocking")
public class BlockingEventLoopThread {


    @GET
    @Blocking
    public Uni<String> blockMe() throws InterruptedException {
        System.out.println(Thread.currentThread().getName());
        //Thread.sleep(1000);
        Thread.sleep(5000);
        return Uni.createFrom().item("Hello");
    }
    @GET
    @Path("reactivescheduler")
    public Uni<Response> getResponseWithDelay() throws InterruptedException {
        System.out.println(Thread.currentThread().getName());
        return Uni.createFrom().item("Hello")
                .onItem()
                .transform(f -> Response.ok(f).header("message", "How are you"))
                .onItem()
                .delayIt().by(Duration.ofMillis(6000))
                .onItem()
                .transform(Response.ResponseBuilder::build);
    }
}
.....................................................................................
			How to handle Exception in Rest api

.....................................................................................

If any application exception happens we need to handle and convert into meaningfull Response.

In order to handle exception in Quarkus, jakarta provides base class jakarta.ws.rs.WebApplicationException

Step:

1.Write Exception mapper class,Which convert any exception into Http Success Response.

package com.ibm.rest.api.exception;


import jakarta.ws.rs.WebApplicationException;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.ext.ExceptionMapper;
import jakarta.ws.rs.ext.Provider;

@Provider
public class WebAppExceptionMapper implements ExceptionMapper<WebApplicationException> {
    @Override
    public Response toResponse(WebApplicationException e) {
        return Response.ok().entity(e.getMessage()).build();
    }
}

2.Resource class where we can test exception.
package com.ibm.rest.api.exception;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.WebApplicationException;

@Path("exception")
public class ExceptionResource {

    @Path("{name}")
    @GET
    public String getName(@PathParam("name") String name) {
        if (name.equals("admin")) {
            return "Hello " + name;
        }
        throw new WebApplicationException("Name is not Matching");
    }
}

Testing:
http://localhost:8080/exception/admin
Response:
Hello admin

http://localhost:8080/exception/foo
Response:
Name is not Matching







