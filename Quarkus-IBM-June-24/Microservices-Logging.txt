				Quarkus and Logging
......................................................................................
One of the core concept in application development is to track the application status-What is happening.

Status of Logging:
.................
1.info
2.warning
3.error
4.Verbose

How do you log?

 Generally we use System.out.println or out.error()

=>This logs only in console
=>This logs only simple values, not detailed one, timeout,method name,class
=>This only simple message, it does not say is it info,warning,error.

Thats where logging framework comes into picture.

There are most popular logging system.

1.JDK java.util.logging
2.Jboss logging
3.Apache Log4J
4.Log4J or SLF4J
5.Apache commons Logging.
etc...

Quakurs uses Jboss logging by default, you dont need to add any third party loggers.

package org.acme;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.jboss.logging.Logger;

@Path("/hello")
public class GreetingResource {

    private static final Logger LOG = Logger.getLogger(GreetingResource.class);

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        //System.out.println("hello is called");
        LOG.warn("Hello Api is called");
        return "Hello from RESTEasy Reactive";
    }
}

Injecting Logger via Dependency Injection:
.........................................
package org.acme;

import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.jboss.logging.Logger;

@Path("/hello")
public class GreetingResource {

   // private static final Logger LOG = Logger.getLogger(GreetingResource.class);
    @Inject
    Logger LOG;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        //System.out.println("hello is called");
        LOG.warn("Hello Api is called");
        return "Hello from RESTEasy Reactive";
    }
}
..................................................................................
		  Configuring Log properties
...................................................................................

How to disable console log?
quarkus.log.console.enable=false

How to change logging formats other than string?

It is possible to change the output of log format.

This can be very usefull in where the output of the quarkus application is captured by a service which can be for eg... Process and store log information for analytics.


I want to show log message in Json...

   <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-logging-json</artifactId>
    </dependency>

{"timestamp":"2024-02-29T15:01:11.1822368+05:30","sequence":1868,"loggerClassName":"org.jboss.logging.Logger","loggerName":"io.quarkus","level":"INFO","message":"Installed features: [cdi, resteasy-reactive, smallrye-context-propagation, vertx]","threadName":"Quarkus Main Thread","threadId":237,"mdc":{},"ndc":"","hostName":"laptop-r2tggfdl","processName":"code-with-quarkus-logging-dev.jar","processId":22184}
{"timestamp":"2024-02-29T15:01:11.1853646+05:30","sequence":1870,"loggerClassName":"org.jboss.logging.Logger","loggerName":"io.quarkus.deployment.dev.RuntimeUpdatesProcessor","level":"INFO","message":"Live reload total time: 0.321s ","threadName":"Aesh InputStream Reader","threadId":96,"mdc":{},"ndc":"","hostName":"laptop-r2tggfdl","processName":"code-with-quarkus-logging-dev.jar","processId":22184}

....................................................................................
			Log Handlers
....................................................................................
Log Handler is a logging component is responsible for the emssion of log events to receipient.

Quarkus supports three types of log handler

1.Console -default
2.File
3.Syslog

application.properties
quarkus.log.console.enable=true
quarkus.log.file.enable=true
quarkus.log.file.level=ALL
quarkus.log.file.path=quarkus.log
....................................................................................
			Log Handler and Profiles
...................................................................................

In the dev mode, i want to show normal log , in Prod mode i want to show log in json.

%dev.quarkus.log.console.json=false 
%prod.quarkus.log.console.json=true
.....................................................................................				Sys Log
....................................................................................
What is Sys log?
   Sys log is nothing but System Logging Protocal, is type of logging that allows a system administors to monitor and manage logs from the parts of the system.
It can be used to track events and errors, as well as provide information about system performance.
 Sys logs are used on Unix-like systems, windows, and other operating systems.

Sys logs and Quarkus Application:

The syslog handler in Quarkus follows the Syslog protocol, which is used to send log messages on UNIX-like systems. It utilizes the protocol defined in RFC 5424.

By default, the syslog handler is disabled. When enabled, it sends all log events to a syslog server, typically the local syslog server for the application.
.....................................................................................
		Centeralized log management-Microservices Log Management	
....................................................................................

Sending log messages from across services into centeralized log server where we can anaylize the log information

There are various products available in the market to capture logs such as graylog,logstash.

Quarkus supported stack:
1.ELK Stack - ElasticSearch,LogStach,Kibana)
2.EFK Stack - ElasticSearch,FluentId,Kibana
3.GLF Stack - GrayLog,Logstash,Fluentd.

We can push quarkus app logs into any one of the stack...

We are going to use Graylog

Add this dependency:

<dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-logging-gelf</artifactId>
</dependency>

application.properties

quarkus.log.handler.gelf.enabled=true
quarkus.log.handler.gelf.host=localhost
quarkus.log.handler.gelf.port=12201

docker-compose.yml

version: '3.2'

services:
  elasticsearch:
    image: docker.io/elastic/elasticsearch:7.16.3
    ports:
      - "9200:9200"
    environment:
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      discovery.type: "single-node"
    networks:
      - graylog

  mongo:
    image: mongo:4.0
    networks:
      - graylog

  graylog:
    image: graylog/graylog:4.3.0
    ports:
      - "9000:9000"
      - "12201:12201/udp"
      - "1514:1514"
    environment:
      GRAYLOG_HTTP_EXTERNAL_URI: "http://127.0.0.1:9000/"
      # CHANGE ME (must be at least 16 characters)!
      GRAYLOG_PASSWORD_SECRET: "forpasswordencryption"
      # Password: admin
      GRAYLOG_ROOT_PASSWORD_SHA2: "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918"
    networks:
      - graylog
    depends_on:
      - elasticsearch
      - mongo

networks:
  graylog:
    driver: bridge

docker-compose up

After running, you can test, 

http://localost:9000

userName: admin
password: admin

We need to send configuration to graylog server

curl -H "Content-Type: application/json" -H "Authorization: Basic YWRtaW46YWRtaW4=" -H "X-Requested-By: curl" -X POST -v -d \
'{"title":"udp input","configuration":{"recv_buffer_size":262144,"bind_address":"0.0.0.0","port":12201,"decompress_size_limit":8388608},"type":"org.graylog2.inputs.gelf.udp.GELFUDPInput","global":true}' \
http://localhost:9000/api/system/inputs

after sending just try push log message into gray log server.


package org.acme;

import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.jboss.logging.Logger;

@Path("/hello")
public class GreetingResource {

   // private static final Logger LOG = Logger.getLogger(GreetingResource.class);
    @Inject
    Logger LOG;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        //System.out.println("hello is called");
        LOG.warn("Hello Api is called");
        return "Hello from RESTEasy Reactive";
    }
}

quarkus dev

http://localhost:8080/hello



